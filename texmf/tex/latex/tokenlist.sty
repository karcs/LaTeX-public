
%% This is file `sections.sty',

\ProvidesPackage{tokenlist}[2014/06/11 v0.1]


%%%%%%%%%%%%%%%%%%%
% PACKAGE OPTIONS %
%%%%%%%%%%%%%%%%%%%

%% terminate option processing
\ProcessOptions\relax

%%%%%%%%%%%%%%%%%
% 1 TOKEN LISTS %
%%%%%%%%%%%%%%%%%

% 1.1 MAKE A NEW LIST

% The \eol token at the end of the token list is needed for the following reason. While pattern matching of the
% \split macro: \split{a}{bb}\head\toksa\tail\toksb does then \toksa={a}\toksb={bb} but
% \toksb={{bb}} is whished, so we need an \eol after {bb}.
\def\newlist#1{%
    \newtoks#1%
    #1={\eol}%
}%

% 1.2 PREPEND AND APPEND A TOKEN

% prepend token #1 to token list #2
\def\prepend#1\to#2{%
    \begingroup%
    \newtoks\tmp%
    \tmp={#1}%
    \edef\act{\noexpand#2={\the\tmp\the#2}}%
    \expandafter%
    \endgroup%
    \act%
}%

% prepend expanded token #1 to token list #2
\def\eprepend#1\to#2{%
    \begingroup%
    \edef\act{\noexpand#2={{#1}\the#2}}%
    \expandafter%
    \endgroup%
    \act%
}%

% append token #1 to token list #2
\def\append#1\to#2{%
    \begingroup%
    \newtoks\tmp%
    \tmp={#1}%
    \edef\act{\noexpand#2={\the#2\the\tmp}}%
    \expandafter%
    \endgroup%
    \act%
}%

% append expanded token #1 to token list #2
\def\eappend#1\to#2{%
    \begingroup%
    \edef\act{\noexpand#2={\the#2{#1}}}%
    \expandafter%
    \endgroup%
    \act%
}%

% 1.3 ADD A TOKEN

% split a non-empty expanded token list into head and tail --- it is used in the \pop macro with
% \eol at the end of the token list.
\def\split#1#2\head#3\tail#4{%
    #4={#2}%
    \def#3{#1}%
    }%
    
% 1.2 POP A TOKEN

% pop first element of token list #1 into #2
% if token list #1 is empty then throw an error message
\def\pop#1\into#2{%
    \begingroup%
    \edef\tmpa{\the#1}
    \def\tmpb{\eol}
    \ifx\tmpa\tmpb%
    \errmessage{\string\pop\space macro could not finish being applied to an empty token list.}%
    \fi%
    \edef\act{%
        \noexpand\split\the#1%
        \noexpand\head\noexpand#2\noexpand\tail\noexpand#1%
    }%
    \expandafter%
    \endgroup%
    \act%
}%

% POP LAST ELEMENT OF A LIST

% has an error in it

% EXPLANATION: use \tmpinit to store the
% initial part of the list #1 locally and
% \tmphead to store the head of the
% local version of #1 (which is a suffix of
% the initial #1).
% Finally use \tmpheadtoks to store the
% tokens of the macro \tmphead and \act to
% make the new definitions.
\def\poplast#1\into#2{%
    \begingroup%
    \edef\tmp{\the#1}%
    \ifx\tmp\empty%
    \errmessage{\string\poplast\space command
        could not finish. The token list is
        empty.}%
    \else%
    \newtoks\tmpinit%
    \tmpinit={}
    \loop%
    \pop#1\into\tmphead%
    \edef\tmp{\the#1}%
    TMPHEAD:\tmphead%
    \unless\ifx\tmp\empty%
    \expandafter\append\expandafter{\tmphead}\to\tmpinit%
    \repeat%
    \fi%
    \newtoks\tmpheadtoks%
    \expandafter\tmpheadtoks\expandafter=\expandafter{\tmphead}
    \edef\act{\noexpand#1={\the\tmpinit} \noexpand\def\noexpand#2{\the\tmpheadtoks}}
    \expandafter%
    \endgroup%
    \act%
}%



% 1.4 LAST ELEMENT

% get last element of list
\def\last#1{%
    \begingroup% keep things local
    \def\tail{#1}%
    \loop%
    \expandafter\@split\tail(head:)\head(tail:)\tail%
    \unless\ifx\tail\empty%
    \repeat%
    \head%
    \endgroup%
}%

    
% context differ

\def\@diff#1(against:)#2{%
    \begingroup% keep things local
    \newif\ifcondition% boolean condition variable for the loop
    \edef\tempa{#1}%
    \edef\tempb{#2}%
    \conditiontrue%
    \loop% start the diff loop
    \pop\tempa(into:)\heada%
    \pop\tempb(into:)\headb%
    \ifx\heada\empty% if either both are empty or not equal then jump off the loop
    \ifx\headb\empty%
    \conditionfalse%
    \fi%
    \fi%
    \unless\ifx\heada\headb%
    \conditionfalse%
    \fi
    \ifcondition%
    \repeat%
    \heada\tempa% return the rest of list #1
    \endgroup%
}%




% drop the first element of #1
%\def\dropfirst#1{%
%    \expandafter\unless\expandafter\ifx\the#1\empty%
%    \edef\act{\noexpand#1=\expandafter\tail\the#1}%
%    \act%
%    \fi}%


% get head of list
%\def\head#1#2{#1}

% get tail of list
%\def\tail#1#2{#2}

% remove token from token list
%\def\remove#1\from{%
%    \loop%
%    \expandafter\pop\csname #1subcounters\endcsname\into\tmp%
%    \unless\ifx\tmp\empty%
%    \expandafter\expandafter\expandafter\global\expandafter\csname \tmp counter\endcsname=0%
%    % reset the subcounters of subcounter \tmp
%    \resetsubcounters{\tmp}%
%    \repeat%
%    }

\endinput
